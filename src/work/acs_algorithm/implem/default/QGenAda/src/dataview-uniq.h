#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1Real asn1SccT_Float;


void asn1SccT_Float_Initialize(asn1SccT_Float* pVal);

#define ERR_T_FLOAT		1  /**/
flag asn1SccT_Float_IsConstraintValid(const asn1SccT_Float* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_FLOAT		2  /**/
#define asn1SccT_Float_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccT_Float_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccT_Float_Encode(const asn1SccT_Float* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_FLOAT		3  /**/
flag asn1SccT_Float_Decode(asn1SccT_Float* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    
    asn1SccT_Float arr[15];
} asn1SccT_B_b_T;

void asn1SccT_B_b_T_Initialize(asn1SccT_B_b_T* pVal);

#define ERR_T_B_B_T		16  /**/
#define ERR_T_B_B_T_ELM_2		11  /**/
flag asn1SccT_B_b_T_IsConstraintValid(const asn1SccT_B_b_T* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_B_B_T		17  /**/
#define ERR_UPER_ENCODE_T_B_B_T_ELM_2		12  /**/
#define asn1SccT_B_b_T_REQUIRED_BYTES_FOR_ENCODING       195 
#define asn1SccT_B_b_T_REQUIRED_BITS_FOR_ENCODING        1560

flag asn1SccT_B_b_T_Encode(const asn1SccT_B_b_T* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_B_B_T		18  /**/
#define ERR_UPER_DECODE_T_B_B_T_ELM_2		13  /**/
flag asn1SccT_B_b_T_Decode(asn1SccT_B_b_T* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    
    asn1SccT_Float arr[3];
} asn1SccT_Omega;

void asn1SccT_Omega_Initialize(asn1SccT_Omega* pVal);

#define ERR_T_OMEGA		31  /**/
#define ERR_T_OMEGA_ELM_2		26  /**/
flag asn1SccT_Omega_IsConstraintValid(const asn1SccT_Omega* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_OMEGA		32  /**/
#define ERR_UPER_ENCODE_T_OMEGA_ELM_2		27  /**/
#define asn1SccT_Omega_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccT_Omega_REQUIRED_BITS_FOR_ENCODING        312

flag asn1SccT_Omega_Encode(const asn1SccT_Omega* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_OMEGA		33  /**/
#define ERR_UPER_DECODE_T_OMEGA_ELM_2		28  /**/
flag asn1SccT_Omega_Decode(asn1SccT_Omega* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    
    asn1SccT_Float arr[3];
} asn1SccT_MT_Working;

void asn1SccT_MT_Working_Initialize(asn1SccT_MT_Working* pVal);

#define ERR_T_MT_WORKING		46  /**/
#define ERR_T_MT_WORKING_ELM_2		41  /**/
flag asn1SccT_MT_Working_IsConstraintValid(const asn1SccT_MT_Working* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_MT_WORKING		47  /**/
#define ERR_UPER_ENCODE_T_MT_WORKING_ELM_2		42  /**/
#define asn1SccT_MT_Working_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccT_MT_Working_REQUIRED_BITS_FOR_ENCODING        312

flag asn1SccT_MT_Working_Encode(const asn1SccT_MT_Working* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_MT_WORKING		48  /**/
#define ERR_UPER_DECODE_T_MT_WORKING_ELM_2		43  /**/
flag asn1SccT_MT_Working_Decode(asn1SccT_MT_Working* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    
    asn1SccT_Float arr[3];
} asn1SccT_Control;

void asn1SccT_Control_Initialize(asn1SccT_Control* pVal);

#define ERR_T_CONTROL		61  /**/
#define ERR_T_CONTROL_ELM_2		56  /**/
flag asn1SccT_Control_IsConstraintValid(const asn1SccT_Control* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_CONTROL		62  /**/
#define ERR_UPER_ENCODE_T_CONTROL_ELM_2		57  /**/
#define asn1SccT_Control_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccT_Control_REQUIRED_BITS_FOR_ENCODING        312

flag asn1SccT_Control_Encode(const asn1SccT_Control* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_CONTROL		63  /**/
#define ERR_UPER_DECODE_T_CONTROL_ELM_2		58  /**/
flag asn1SccT_Control_Decode(asn1SccT_Control* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int32;


void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);

#define ERR_T_INT32		66  /**/
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT32		67  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_Int32_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		68  /**/
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt32;


void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);

#define ERR_T_UINT32		71  /**/
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT32		72  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		73  /**/
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int8;


void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);

#define ERR_T_INT8		76  /**/
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT8		77  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_Int8_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		78  /**/
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt8;


void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);

#define ERR_T_UINT8		81  /**/
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT8		82  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		83  /**/
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag asn1SccT_Boolean;


void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);

#define ERR_T_BOOLEAN		86  /**/
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_BOOLEAN		87  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		88  /**/
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccT_Null_Record --------------------------------------------*/
typedef struct {

} asn1SccT_Null_Record;

void asn1SccT_Null_Record_Initialize(asn1SccT_Null_Record* pVal);

#define ERR_T_NULL_RECORD		91  /**/
flag asn1SccT_Null_Record_IsConstraintValid(const asn1SccT_Null_Record* pVal, int* pErrCode);

#define asn1SccT_Null_Record_REQUIRED_BYTES_FOR_ENCODING       0 
#define asn1SccT_Null_Record_REQUIRED_BITS_FOR_ENCODING        0

flag asn1SccT_Null_Record_Encode(const asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccT_Null_Record_Decode(asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
